name: Build All Platform Binaries

on:
  push:
    branches:
      - main
      - dev
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.15.32)'
        required: false
        default: ''

jobs:
  # Build matrix for all platforms
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # macOS builds
          - os: darwin
            arch: arm64
            runner: macos-14  # M1 runner
          - os: darwin
            arch: x64
            runner: macos-13  # Intel runner

          # Linux builds
          - os: linux
            arch: x64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-latest  # Cross-compile

          # Windows builds
          - os: windows
            arch: x64
            runner: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.24.0'
          cache: true
          cache-dependency-path: packages/tui/go.sum

      - name: Install dependencies
        run: |
          # Install from monorepo root to get all workspace dependencies
          bun install
          # Also install in packages/opencode for local deps
          cd packages/opencode
          bun install --no-save

      - name: Build platform binary
        run: |
          cd packages/opencode
          bun run build
        env:
          TARGET_OS: ${{ matrix.os }}
          TARGET_ARCH: ${{ matrix.arch }}

      - name: Verify build
        shell: bash
        run: |
          cd packages/opencode
          BINARY_NAME="snow-code-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_PATH="dist/@groeimetai/$BINARY_NAME/bin/snow-code.exe"
          else
            BINARY_PATH="dist/@groeimetai/$BINARY_NAME/bin/snow-code"
          fi

          if [ ! -f "$BINARY_PATH" ]; then
            echo "ERROR: Binary not found at $BINARY_PATH"
            exit 1
          fi

          ls -lh "$BINARY_PATH"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: snow-code-${{ matrix.os }}-${{ matrix.arch }}
          path: packages/opencode/dist/@groeimetai/snow-code-${{ matrix.os }}-${{ matrix.arch }}/
          retention-days: 7

  # Publish all binaries to npm
  publish:
    name: Publish to npm
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages/opencode/dist/@groeimetai/

      - name: Setup npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Get version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=$(cat packages/opencode/package.json | grep '"version"' | head -1 | sed 's/.*"version": "\(.*\)".*/\1/')" >> $GITHUB_OUTPUT
          fi

      - name: Publish platform binaries
        run: |
          cd packages/opencode/dist/@groeimetai
          for dir in snow-code-*; do
            if [ -d "$dir" ]; then
              echo "Publishing $dir..."
              cd "$dir"
              npm publish --access public || echo "Failed to publish $dir (may already exist)"
              cd ..
            fi
          done

      - name: Publish main package
        run: |
          cd packages/opencode
          npm publish --access public || echo "Failed to publish main package (may already exist)"

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          body: |
            ## Installation

            ```bash
            npm install -g @groeimetai/snow-code@${{ steps.version.outputs.version }}
            ```

            ## Platform Binaries Published to npm

            - `@groeimetai/snow-code-darwin-arm64@${{ steps.version.outputs.version }}`
            - `@groeimetai/snow-code-darwin-x64@${{ steps.version.outputs.version }}`
            - `@groeimetai/snow-code-linux-arm64@${{ steps.version.outputs.version }}`
            - `@groeimetai/snow-code-linux-x64@${{ steps.version.outputs.version }}`
            - `@groeimetai/snow-code-windows-x64@${{ steps.version.outputs.version }}`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
