// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { EventSubscribeData, EventSubscribeResponses, AppGetData, AppGetResponses, AppInitData, AppInitResponses, ConfigGetData, ConfigGetResponses, SessionListData, SessionListResponses, SessionCreateData, SessionCreateResponses, SessionCreateErrors, SessionDeleteData, SessionDeleteResponses, SessionInitData, SessionInitResponses, SessionAbortData, SessionAbortResponses, SessionUnshareData, SessionUnshareResponses, SessionShareData, SessionShareResponses, SessionSummarizeData, SessionSummarizeResponses, SessionMessagesData, SessionMessagesResponses, SessionChatData, SessionChatResponses, SessionRevertData, SessionRevertResponses, SessionUnrevertData, SessionUnrevertResponses, ConfigProvidersData, ConfigProvidersResponses, FindTextData, FindTextResponses, FindFilesData, FindFilesResponses, FindSymbolsData, FindSymbolsResponses, FileReadData, FileReadResponses, FileStatusData, FileStatusResponses, AppLogData, AppLogResponses, AppModesData, AppModesResponses, TuiAppendPromptData, TuiAppendPromptResponses, TuiOpenHelpData, TuiOpenHelpResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

class Event {
    /**
     * Get events
     */
    public static subscribe<ThrowOnError extends boolean = false>(options?: Options<EventSubscribeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<EventSubscribeResponses, unknown, ThrowOnError>({
            url: '/event',
            ...options
        });
    }
}

class App {
    /**
     * Get app info
     */
    public static get<ThrowOnError extends boolean = false>(options?: Options<AppGetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<AppGetResponses, unknown, ThrowOnError>({
            url: '/app',
            ...options
        });
    }
    
    /**
     * Initialize the app
     */
    public static init<ThrowOnError extends boolean = false>(options?: Options<AppInitData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<AppInitResponses, unknown, ThrowOnError>({
            url: '/app/init',
            ...options
        });
    }
    
    /**
     * Write a log entry to the server logs
     */
    public static log<ThrowOnError extends boolean = false>(options?: Options<AppLogData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<AppLogResponses, unknown, ThrowOnError>({
            url: '/log',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * List all modes
     */
    public static modes<ThrowOnError extends boolean = false>(options?: Options<AppModesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<AppModesResponses, unknown, ThrowOnError>({
            url: '/mode',
            ...options
        });
    }
}

class Config {
    /**
     * Get config info
     */
    public static get<ThrowOnError extends boolean = false>(options?: Options<ConfigGetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ConfigGetResponses, unknown, ThrowOnError>({
            url: '/config',
            ...options
        });
    }
    
    /**
     * List all providers
     */
    public static providers<ThrowOnError extends boolean = false>(options?: Options<ConfigProvidersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<ConfigProvidersResponses, unknown, ThrowOnError>({
            url: '/config/providers',
            ...options
        });
    }
}

class Session {
    /**
     * List all sessions
     */
    public static list<ThrowOnError extends boolean = false>(options?: Options<SessionListData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<SessionListResponses, unknown, ThrowOnError>({
            url: '/session',
            ...options
        });
    }
    
    /**
     * Create a new session
     */
    public static create<ThrowOnError extends boolean = false>(options?: Options<SessionCreateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<SessionCreateResponses, SessionCreateErrors, ThrowOnError>({
            url: '/session',
            ...options
        });
    }
    
    /**
     * Delete a session and all its data
     */
    public static delete<ThrowOnError extends boolean = false>(options: Options<SessionDeleteData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<SessionDeleteResponses, unknown, ThrowOnError>({
            url: '/session/{id}',
            ...options
        });
    }
    
    /**
     * Analyze the app and create an AGENTS.md file
     */
    public static init<ThrowOnError extends boolean = false>(options: Options<SessionInitData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SessionInitResponses, unknown, ThrowOnError>({
            url: '/session/{id}/init',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Abort a session
     */
    public static abort<ThrowOnError extends boolean = false>(options: Options<SessionAbortData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SessionAbortResponses, unknown, ThrowOnError>({
            url: '/session/{id}/abort',
            ...options
        });
    }
    
    /**
     * Unshare the session
     */
    public static unshare<ThrowOnError extends boolean = false>(options: Options<SessionUnshareData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<SessionUnshareResponses, unknown, ThrowOnError>({
            url: '/session/{id}/share',
            ...options
        });
    }
    
    /**
     * Share a session
     */
    public static share<ThrowOnError extends boolean = false>(options: Options<SessionShareData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SessionShareResponses, unknown, ThrowOnError>({
            url: '/session/{id}/share',
            ...options
        });
    }
    
    /**
     * Summarize the session
     */
    public static summarize<ThrowOnError extends boolean = false>(options: Options<SessionSummarizeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SessionSummarizeResponses, unknown, ThrowOnError>({
            url: '/session/{id}/summarize',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * List messages for a session
     */
    public static messages<ThrowOnError extends boolean = false>(options: Options<SessionMessagesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<SessionMessagesResponses, unknown, ThrowOnError>({
            url: '/session/{id}/message',
            ...options
        });
    }
    
    /**
     * Create and send a new message to a session
     */
    public static chat<ThrowOnError extends boolean = false>(options: Options<SessionChatData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SessionChatResponses, unknown, ThrowOnError>({
            url: '/session/{id}/message',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Revert a message
     */
    public static revert<ThrowOnError extends boolean = false>(options: Options<SessionRevertData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SessionRevertResponses, unknown, ThrowOnError>({
            url: '/session/{id}/revert',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * Restore all reverted messages
     */
    public static unrevert<ThrowOnError extends boolean = false>(options: Options<SessionUnrevertData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SessionUnrevertResponses, unknown, ThrowOnError>({
            url: '/session/{id}/unrevert',
            ...options
        });
    }
}

class Find {
    /**
     * Find text in files
     */
    public static text<ThrowOnError extends boolean = false>(options: Options<FindTextData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<FindTextResponses, unknown, ThrowOnError>({
            url: '/find',
            ...options
        });
    }
    
    /**
     * Find files
     */
    public static files<ThrowOnError extends boolean = false>(options: Options<FindFilesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<FindFilesResponses, unknown, ThrowOnError>({
            url: '/find/file',
            ...options
        });
    }
    
    /**
     * Find workspace symbols
     */
    public static symbols<ThrowOnError extends boolean = false>(options: Options<FindSymbolsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<FindSymbolsResponses, unknown, ThrowOnError>({
            url: '/find/symbol',
            ...options
        });
    }
}

class File {
    /**
     * Read a file
     */
    public static read<ThrowOnError extends boolean = false>(options: Options<FileReadData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<FileReadResponses, unknown, ThrowOnError>({
            url: '/file',
            ...options
        });
    }
    
    /**
     * Get file status
     */
    public static status<ThrowOnError extends boolean = false>(options?: Options<FileStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<FileStatusResponses, unknown, ThrowOnError>({
            url: '/file/status',
            ...options
        });
    }
}

class Tui {
    /**
     * Append prompt to the TUI
     */
    public static appendPrompt<ThrowOnError extends boolean = false>(options?: Options<TuiAppendPromptData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<TuiAppendPromptResponses, unknown, ThrowOnError>({
            url: '/tui/append-prompt',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    /**
     * Open the help dialog
     */
    public static openHelp<ThrowOnError extends boolean = false>(options?: Options<TuiOpenHelpData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<TuiOpenHelpResponses, unknown, ThrowOnError>({
            url: '/tui/open-help',
            ...options
        });
    }
}

export class Default {
    static event = Event;
    static app = App;
    static config = Config;
    static session = Session;
    static find = Find;
    static file = File;
    static tui = Tui;
}